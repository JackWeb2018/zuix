[
  {
    "tags": [],
    "description": {
      "full": "Copyright 2015-2017 G-Labs. All Rights Reserved.\n        https://genielabs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
      "summary": "Copyright 2015-2017 G-Labs. All Rights Reserved.\n        https://genielabs.github.io/zuix",
      "body": "Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1,
    "codeStart": 17
  },
  {
    "tags": [
      {
        "type": "author",
        "string": "Generoso Martello <generoso@martello.com>"
      }
    ],
    "description": {
      "full": "ZUIX, Javascript library for component-based development.\n       https://genielabs.github.io/zuix",
      "summary": "ZUIX, Javascript library for component-based development.\n       https://genielabs.github.io/zuix",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 18,
    "codeStart": 26,
    "code": "\"use strict\";\n\nvar util =\n    require('../helpers/Util');\nvar z$ =\n    require('../helpers/ZxQuery');\nvar TaskQueue =\n    require('../helpers/TaskQueue');\nvar ComponentContext =\n    require('./ComponentContext');\nvar ContextController =\n    require('./ContextController');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "const",
        "string": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 42,
    "code": "var ZUIX_FIELD_ATTRIBUTE = 'data-ui-field';",
    "ctx": {
      "type": "declaration",
      "name": "ZUIX_FIELD_ATTRIBUTE",
      "value": "'data-ui-field'",
      "string": "ZUIX_FIELD_ATTRIBUTE"
    }
  },
  {
    "tags": [
      {
        "type": "class",
        "string": "Zuix"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "returns",
        "string": "{Zuix}",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "ZUIX, Javascript library for component-based development.",
      "summary": "ZUIX, Javascript library for component-based development.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": true,
    "isEvent": false,
    "ignore": false,
    "line": 44,
    "codeStart": 51,
    "code": "function Zuix() {\n    return this;\n}",
    "ctx": {
      "type": "constructor",
      "name": "Zuix",
      "string": "Zuix()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "type",
        "string": "{!Array.<ComponentCache>}",
        "types": [
          "Array.<ComponentCache>"
        ],
        "typesDescription": "!<code>Array</code>.&lt;<a href=\"ComponentCache.html\">ComponentCache</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 55,
    "codeStart": 59,
    "code": "var _componentCache = [];",
    "ctx": {
      "type": "declaration",
      "name": "_componentCache",
      "value": "[]",
      "string": "_componentCache"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 61,
    "codeStart": 62,
    "code": "var _contextSeqNum = 0;",
    "ctx": {
      "type": "declaration",
      "name": "_contextSeqNum",
      "value": "0",
      "string": "_contextSeqNum"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "type",
        "string": "{!Array<ComponentContext>}",
        "types": [
          "Array.<ComponentContext>"
        ],
        "typesDescription": "!<code>Array</code>.&lt;<a href=\"ComponentContext.html\">ComponentContext</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 67,
    "code": "var _contextRoot = [];",
    "ctx": {
      "type": "declaration",
      "name": "_contextRoot",
      "value": "[]",
      "string": "_contextRoot"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 69,
    "codeStart": 70,
    "code": "var _hooksCallbacks = [];",
    "ctx": {
      "type": "declaration",
      "name": "_hooksCallbacks",
      "value": "[]",
      "string": "_hooksCallbacks"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 72,
    "codeStart": 73,
    "code": "var _globalHandlers = {};",
    "ctx": {
      "type": "declaration",
      "name": "_globalHandlers",
      "value": "{}",
      "string": "_globalHandlers"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 75,
    "codeStart": 76,
    "code": "var _lazyQueued = []; // Lazy loading - queued elements",
    "ctx": {
      "type": "declaration",
      "name": "_lazyQueued",
      "value": "[]",
      "string": "_lazyQueued"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 77,
    "codeStart": 78,
    "code": "var _lazyLoaders = []; // \"data-ui-lazyload\" elements",
    "ctx": {
      "type": "declaration",
      "name": "_lazyLoaders",
      "value": "[]",
      "string": "_lazyLoaders"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "*",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 80,
    "codeStart": 81,
    "code": "var tasker = new TaskQueue(function (tq, eventPath, eventValue) {\n    trigger(tq, eventPath, eventValue);\n});",
    "ctx": {
      "type": "declaration",
      "name": "tasker",
      "value": "new TaskQueue(function (tq, eventPath, eventValue) {",
      "string": "tasker"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "handler {ContextControllerHandler}",
        "name": "handler",
        "description": "{ContextControllerHandler}",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "return",
        "string": "{ContextControllerHandler}",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Initializes a controller ```handler```.",
      "summary": "Initializes a controller ```handler```.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 85,
    "codeStart": 92,
    "code": "function controller(handler) {\n    if (typeof handler['for'] !== 'function')\n        handler['for'] = function (componentId) {\n            _globalHandlers[componentId] = handler;\n            return handler;\n        };\n    return handler;\n}",
    "ctx": {
      "type": "function",
      "name": "controller",
      "string": "controller()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{!string} fieldName Value to match in the `data-ui-field` attribute.",
        "name": "fieldName",
        "description": "Value to match in the `data-ui-field` attribute.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{!Element} [container] Starting DOM element for this search (**default:** *document*)",
        "name": "[container]",
        "description": "Starting DOM element for this search (**default:** *document*)",
        "types": [
          "Element"
        ],
        "typesDescription": "!<code>Element</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery}",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "summary": "Gets elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 101,
    "codeStart": 110,
    "code": "function field(fieldName, container) {\n    // TODO: implement caching ?\n    return z$(container).find('[' + ZUIX_FIELD_ATTRIBUTE + '=\"' + fieldName + '\"]');\n}",
    "ctx": {
      "type": "function",
      "name": "field",
      "string": "field()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "[element] {Element} Optional container to use as starting node for the search.",
        "name": "[element]",
        "description": "{Element} Optional container to use as starting node for the search.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "Searches inside the given element ```element```\nfor all ```data-ui-include``` and ```data-ui-load```\ndirectives and process them.",
      "summary": "Searches inside the given element ```element```\nfor all ```data-ui-include``` and ```data-ui-load```\ndirectives and process them.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 115,
    "codeStart": 123,
    "code": "function componentize(element) {\n    // Throttle method\n    if (tasker.requestLock(componentize)) {\n        z$(element).find('[data-ui-load]:not([data-ui-loaded=true]),[data-ui-include]:not([data-ui-loaded=true])').each(function (i, el) {\n            this.visibility('hidden');\n            // defer element loading if lazy loading is enabled and the element is not in view\n            var lazyContainer = el.lazyContainer || z$.getClosest(el, '[data-ui-lazyload=scroll]');\n//            if (lazyContainer == null)\n//                lazyContainer = el;\n            el.lazyContainer = lazyContainer;\n            // override lazy loading if 'lazyload' is set to 'false' for the current element\n            if (!(lazyContainer != null && lazyContainer.getAttribute('data-ui-lazyload') == 'force')\n                &&\n                (!lazyLoad() || this.attr('data-ui-lazyload') == 'false')) {\n                loadInline(el);\n                return true;\n            }\n            if (lazyContainer !== null) {\n                if (_lazyLoaders.indexOf(lazyContainer) == -1) {\n                    _lazyLoaders.push(lazyContainer);\n                    z$(lazyContainer).on('scroll', function () {\n                        componentize(lazyContainer);\n                    });\n                }\n                var position = z$.getPosition(el);\n                if (!position.visible) {\n                    if (_lazyQueued.indexOf(el) == -1) {\n                        _lazyQueued.push(el);\n                    }\n                    // Not in view: defer element loading and\n                    // process next inline element\n                    return true;\n                }\n            }\n            // proceed loading inline element\n            var queued = _lazyQueued.indexOf(el);\n            if (queued > -1)\n                _lazyQueued.splice(queued, 1);\n            loadInline(el);\n        });\n        tasker.releaseLock(componentize);\n    } else tasker.lockLater(componentize, function () {\n        componentize(element);\n    }, 200);\n}",
    "ctx": {
      "type": "function",
      "name": "componentize",
      "string": "componentize()"
    }
  },
  {
    "tags": [
      {
        "type": "protected",
        "string": "",
        "visibility": "protected"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 169,
    "codeStart": 170,
    "code": "function loadInline(element) {\n    var v = z$(element);\n    if (v.attr('data-ui-loaded') === 'true' || v.parent('pre,code').length() > 0) {\n        console.log(\"ZUIX\", \"WARN\", \"Skipped\", element);\n        return;\n    }\n    v.attr('data-ui-loaded', 'true');",
    "ctx": {
      "type": "function",
      "name": "loadInline",
      "string": "loadInline()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ContextOptions}",
        "types": [
          "ContextOptions"
        ],
        "typesDescription": "<a href=\"ContextOptions.html\">ContextOptions</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 177,
    "codeStart": 178,
    "code": "var options = v.attr('data-ui-options');\nif (!util.isNoU(options)) {\n    options = util.propertyFromPath(window, options);\n    // copy passed options\n    options = util.cloneObject(options) || {};\n} else options = {};\n\n// Automatic view/container selection\nif (util.isNoU(options.view) && !v.isEmpty()) {\n    options.view = element;\n    options.viewDeferred = true;\n} else if (util.isNoU(options.view) && util.isNoU(options.container) && v.isEmpty())\n    options.container = element;\n\nvar componentId = v.attr('data-ui-load');\nif (util.isNoU(componentId)) {\n    // Static include should not have any controller\n    componentId = v.attr('data-ui-include');\n    v.attr('data-ui-component', componentId);\n    // disable controller auto-loading\n    if (util.isNoU(options.controller))\n        options.controller = function () {\n        }; // null\n}\n\n// inline attributes have precedence over ```options```\n\nvar model = v.attr('data-bind-model');\nif (!util.isNoU(model) && model.length > 0)\n    options.model = util.propertyFromPath(window, model);\n\nvar contextId = v.attr('data-ui-context');\nif (!util.isNoU(contextId))\n    options.contextId = contextId;\n\nvar priority = v.attr('data-ui-priority');\nif (!util.isNoU(priority))\n    options.priority = priority;\n// TODO: Behavior are also definable in \"data-ui-behavior\" attribute\n// TODO: Events are also definable in \"data-ui-on\" attribute\n// TODO: perhaps \"data-ui-ready\" and \"data-ui-error\" too\n// util.propertyFromPath( ... )\n\nload(componentId, options);\n}",
    "ctx": {
      "type": "declaration",
      "name": "options",
      "value": "v.attr('data-ui-options')",
      "string": "options"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{!string} componentId The id/name of the component we want to load.",
        "name": "componentId",
        "description": "The id/name of the component we want to load.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ContextOptions|undefined} [options] context options used to initialize the loaded component",
        "name": "[options]",
        "description": "context options used to initialize the loaded component",
        "types": [
          "ContextOptions"
        ],
        "typesDescription": "<a href=\"ContextOptions.html\">ContextOptions</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext}",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Loads a component with the given options.",
      "summary": "Loads a component with the given options.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 224,
    "codeStart": 232,
    "code": "function load(componentId, options) {\n    // TODO: throw error on argument mismatch\n    // TODO: prevent load loops when including recursively a component",
    "ctx": {
      "type": "function",
      "name": "load",
      "string": "load()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentContext}",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 236,
    "codeStart": 237,
    "code": "var ctx = null;\nif (!util.isNoU(options)) {\n    // check if context has its unique id assigned\n    if (!util.isNoU(options.contextId)) {\n        // if it does, try to pick it from allocated contexts list\n        ctx = context(options.contextId);\n        if (ctx !== null) {\n            ctx.options(options);\n        } else {\n            // if no context is already allocated\n            // with that id, then add a new one\n            ctx = createContext(options);\n        }\n    } else {\n        if (options === false)\n            options = {};\n        // generate contextId (this is a bit buggy, but it's quick)\n        options.contextId = 'zuix-ctx-' + (++_contextSeqNum);\n        ctx = createContext(options);\n    }\n} else {\n    // empty context\n    options = {};\n    ctx = new ComponentContext(options, trigger);\n}\n\n// assign the given component (widget) to this context\nif (ctx.componentId != componentId) {\n    ctx.componentId = componentId;",
    "ctx": {
      "type": "declaration",
      "name": "ctx",
      "value": "null",
      "string": "ctx"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "TODO: to be fixed\n         if (!util.isNoU(context.view())) {\n         // TODO: implement this code in a context.detach() method\n         //context.controller().pause()\n         context.view().detach();\n         context.view(null);\n         }",
      "summary": "TODO: to be fixed\n         if (!util.isNoU(context.view())) {\n         // TODO: implement this code in a context.detach() method\n         //context.controller().pause()\n         context.view().detach();\n         context.view(null);\n         }",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 266,
    "codeStart": 274,
    "code": "}\n\nif (util.isFunction(options.ready))\n    ctx.ready = options.ready;\nif (util.isFunction(options.error))\n    ctx.error = options.error;\n\nif (util.isNoU(options.view)) {\n\n    // pick it from cache if found\n    var cachedComponent = getCachedComponent(ctx.componentId);\n    if (cachedComponent !== null && util.isNoU(ctx.controller()))\n        ctx.controller(cachedComponent.controller);\n\n    if (cachedComponent !== null && cachedComponent.view != null) {\n        ctx.view(cachedComponent.view);\n        // TODO: implement CSS caching as well\n        if (options.css !== false) {\n            ctx.loadCss({\n                error: function (err) {\n                    console.log(err, ctx);\n                },\n                then: function () {\n                    loadController(ctx);\n                }\n            });\n            // defer controller loading\n            return ctx;\n        }\n    } else {\n        // if not able to inherit the view from the base cachedComponent\n        // or from an inline element, then load the view from web\n        if (util.isNoU(ctx.view())) {\n            // Load View\n            tasker.queue('html:' + ctx.componentId, function () {\n                var task = this;\n\n                ctx.loadHtml({\n                    success: function () {\n                        if (options.css !== false) {\n                            ctx.loadCss({\n                                error: function (err) {\n                                    console.log(err, ctx);\n                                },\n                                then: function () {\n                                    loadController(ctx, task);\n                                }\n                            });\n                        } else {\n                            loadController(ctx, task);\n                        }\n                    },\n                    error: function (err) {\n                        console.log(err, ctx);\n                        if (util.isFunction(options.error))\n                            (ctx.error).call(ctx, err);\n                    }\n                });\n\n            }, options.priority);\n            // defer controller loading\n            return ctx;\n        }\n    }\n} else {\n    ctx.view(options.view);\n}\nloadController(ctx);\nreturn ctx;\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "context {ComponentContext}",
        "name": "context",
        "description": "{ComponentContext}",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "Unload and dispose the component.",
      "summary": "Unload and dispose the component.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 345,
    "codeStart": 351,
    "code": "function unload(context) {\n    if (!util.isNoU(context) && !util.isNoU(context._c)) {\n        if (!util.isNoU(context._c.view()))\n            context._c.view().attr('data-ui-component', null);\n\n        //context.unregisterEvents();\n        // TODO: unregister events and local context behavior\n        // TODO: detach view from parent if context.container is not null\n\n        if (util.isFunction(context._c.destroy))\n            context._c.destroy();\n    }\n}",
    "ctx": {
      "type": "function",
      "name": "unload",
      "string": "unload()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 365,
    "codeStart": 366,
    "code": "function createContext(options) {\n    var context = new ComponentContext(options, trigger);\n    _contextRoot.push(context);\n    return context;\n}",
    "ctx": {
      "type": "function",
      "name": "createContext",
      "string": "createContext()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{Element|ZxQuery|object} contextId",
        "name": "contextId",
        "description": "",
        "types": [
          "Element",
          "ZxQuery",
          "object"
        ],
        "typesDescription": "<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext}",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "TODO: desc",
      "summary": "TODO: desc",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 372,
    "codeStart": 379,
    "code": "function context(contextId) {\n    var context = null;\n    if (contextId instanceof z$.ZxQuery)\n        contextId = contextId.get();\n    z$.each(_contextRoot, function (k, v) {\n        if ((contextId instanceof Element && (v.view() === contextId || v.container() === contextId))\n            || util.objectEquals(v.contextId, contextId)) {\n            context = v;\n            return false;\n        }\n    });\n    return context;\n}",
    "ctx": {
      "type": "function",
      "name": "context",
      "string": "context()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 393,
    "codeStart": 394,
    "code": "function removeContext(contextId) {\n    // TODO: removeContext\n}",
    "ctx": {
      "type": "function",
      "name": "removeContext",
      "string": "removeContext()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "path",
        "name": "path",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "handler",
        "name": "handler",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "TODO: desc",
      "summary": "TODO: desc",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 398,
    "codeStart": 405,
    "code": "function hook(path, handler) {\n    if (util.isNoU(handler))\n        return _hooksCallbacks[path];\n    _hooksCallbacks[path] = handler;\n}",
    "ctx": {
      "type": "function",
      "name": "hook",
      "string": "hook()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "context",
        "name": "context",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "path",
        "name": "path",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "data",
        "name": "data",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "TODO: desc",
      "summary": "TODO: desc",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 411,
    "codeStart": 419,
    "code": "function trigger(context, path, data) {\n\n    // TODO: call all registered callback\n    if (util.isFunction(_hooksCallbacks[path]))\n        _hooksCallbacks[path].call(context, data);\n\n    // ZUIX Componentizer is the last executed hook (built-in)\n    if (path == 'view:process')\n        componentize(data);\n}",
    "ctx": {
      "type": "function",
      "name": "trigger",
      "string": "trigger()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{boolean} [enable]",
        "name": "[enable]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} *true* if lazy-loading is enabled, *false* otherwise.",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if lazy-loading is enabled, *false* otherwise."
      }
    ],
    "description": {
      "full": "Enable/Disable lazy-loading, or get current value.",
      "summary": "Enable/Disable lazy-loading, or get current value.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 430,
    "codeStart": 437,
    "code": "function lazyLoad(enable) {\n    if (enable != null)\n        _disableLazyLoading = !enable;\n    return !_isCrawlerBotClient && !_disableLazyLoading;\n}",
    "ctx": {
      "type": "function",
      "name": "lazyLoad",
      "string": "lazyLoad()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "********************* private members ************************",
      "summary": "********************* private members ************************",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 444,
    "codeStart": 445
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 447,
    "codeStart": 448,
    "code": "function removeCachedComponent(componentId) {\n    // TODO: removeCachedComponent\n}",
    "ctx": {
      "type": "function",
      "name": "removeCachedComponent",
      "string": "removeCachedComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{Object} componentId",
        "name": "componentId",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 452,
    "codeStart": 457,
    "code": "function getCachedComponent(componentId) {",
    "ctx": {
      "type": "function",
      "name": "getCachedComponent",
      "string": "getCachedComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 458,
    "codeStart": 459,
    "code": "var cached = null;\nz$.each(_componentCache, function (k, v) {\n    if (util.objectEquals(v.componentId, componentId)) {\n        cached = v;\n        return false;\n    }\n});\nreturn cached;\n}",
    "ctx": {
      "type": "declaration",
      "name": "cached",
      "value": "null",
      "string": "cached"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{ComponentContext} context",
        "name": "context",
        "description": "",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{TaskQueue} [task]",
        "name": "[task]",
        "description": "",
        "types": [
          "TaskQueue"
        ],
        "typesDescription": "<a href=\"TaskQueue.html\">TaskQueue</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 469,
    "codeStart": 474,
    "code": "function loadController(context, task) {\n    if (typeof context.options().controller === 'undefined' && context.controller() === null) {\n        if (util.isFunction(_globalHandlers[context.componentId])) {\n            context.controller(_globalHandlers[context.componentId]);\n            createComponent(context);\n            if (!util.isNoU(task)) task.end();\n        } else {\n            var job = function(t) {\n                z$.ajax({\n                    url: context.componentId + \".js?\" + new Date().getTime(),\n                    success: function (ctrlJs) {\n                        // TODO: improve js parsing!\n                        try {\n                            var fn = ctrlJs.indexOf('function');\n                            var il = ctrlJs.indexOf('.load');\n                            if (il > 1 && il < fn)\n                                ctrlJs = ctrlJs.substring(0, il - 4);\n                            var ih = ctrlJs.indexOf('.controller');\n                            if (ih > 1 && ih < fn)\n                                ctrlJs = ctrlJs.substring(ih + 11);\n                            var ec = ctrlJs.indexOf('//<--controller');\n                            if (ec > 0)\n                                ctrlJs = ctrlJs.substring(0, ec);\n                            context.controller(getController(ctrlJs));\n                        } catch (e) {\n                            console.log(e, ctrlJs, context);\n                            if (util.isFunction(context.error))\n                                (context.error).call(context, e);\n                        }\n                    },\n                    error: function (err) {\n                        console.log(err, context);\n                        if (util.isFunction(context.error))\n                            (context.error).call(context, err);\n                    },\n                    then: function () {\n                        createComponent(context);\n                        t.end();\n                    }\n                });\n            };\n            if (util.isNoU(task)) {\n                tasker.queue('js:' + context.componentId, function () {\n                    job(this);\n                }, context.options().priority);\n            } else job(task);\n        }\n    } else {\n        createComponent(context);\n        if (!util.isNoU(task)) task.end();\n    }\n}",
    "ctx": {
      "type": "function",
      "name": "loadController",
      "string": "loadController()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "context {ComponentContext}",
        "name": "context",
        "description": "{ComponentContext}",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 527,
    "codeStart": 531,
    "code": "function createComponent(context) {\n    if (!util.isNoU(context.view())) {\n        if (!context.options().viewDeferred) {\n            var cached = getCachedComponent(context.componentId);\n            if (cached === null) {\n                var html = (context.view() === context.container() ? context.view().innerHTML : context.view().outerHTML);\n                var c = z$.wrapElement('div', html);\n                _componentCache.push({\n                    componentId: context.componentId,\n                    view: c.innerHTML,\n                    controller: context.controller()\n                });\n            }\n        }\n        initComponent(context);\n    } else {\n        // TODO: report error\n    }\n}",
    "ctx": {
      "type": "function",
      "name": "createComponent",
      "string": "createComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{ComponentContext} context",
        "name": "context",
        "description": "",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 551,
    "codeStart": 555,
    "code": "function initComponent(context) {\n    if (util.isFunction(context.controller())) {",
    "ctx": {
      "type": "function",
      "name": "initComponent",
      "string": "initComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ContextController}",
        "types": [
          "ContextController"
        ],
        "typesDescription": "<a href=\"ContextController.html\">ContextController</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 557,
    "codeStart": 558,
    "code": "var c = context._c = new ContextController(context);\nif (!util.isNoU(c.view())) {\n    c.view().attr('data-ui-component', context.componentId);\n    // if no model is supplied, try auto-create from view fields\n    if (util.isNoU(context.model()) && !util.isNoU(context.view()))\n        context.viewToModel();\n    c.trigger('view:apply');\n    if (context.options().viewDeferred) {\n        context.options().viewDeferred = false;\n        // save the original inline view\n        // before loading the view template\n        // it can be then restored with c.restoreView()\n        c.saveView();\n        if (context.options().css !== false)\n            context.loadCss();\n        if (context.options().html !== false)\n            context.loadHtml();\n    }\n    c.view().css('visibility', '');\n}\nif (util.isFunction(c.create)) c.create();\nc.trigger('view:create');\n    }\n    if (util.isFunction(context.ready))\n(context.ready).call(context);\n}",
    "ctx": {
      "type": "declaration",
      "name": "c",
      "value": "context._c = new ContextController(context)",
      "string": "c"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "javascriptCode string",
        "name": "javascriptCode",
        "description": "string",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "{ContextControllerHandler}",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 585,
    "codeStart": 590,
    "code": "// TODO: refactor this method name\nfunction getController(javascriptCode) {\n    var instance = function (ctx) {\n    };\n    if (typeof javascriptCode === 'string') {\n        try {\n            instance = (eval).call(this, javascriptCode);\n        } catch (e) {\n            // TODO: should trigger a global hook\n            // eg. 'controller:error'\n            console.log(this, e, javascriptCode);\n        }\n    }\n    return instance;\n}\n\n// Browser Agent / Bot detection",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 607,
    "codeStart": 608
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 608,
    "codeStart": 609,
    "code": "var _isCrawlerBotClient = false, _disableLazyLoading = false;\nif (navigator && navigator.userAgent)\n    _isCrawlerBotClient = new RegExp(/bot|googlebot|crawler|spider|robot|crawling/i)\n        .test(navigator.userAgent);\nif (_isCrawlerBotClient)\n    console.log(navigator.userAgent, \"is a bot, ignoring 'data-ui-lazyload' option.\");",
    "ctx": {
      "type": "declaration",
      "name": "_isCrawlerBotClient",
      "value": "false, _disableLazyLoading = false",
      "string": "_isCrawlerBotClient"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "***************** proto *******************",
      "summary": "***************** proto *******************",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 617,
    "codeStart": 618
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n<pre data-line=\"2\"><code class=\"language-js\">\n// Controller of component 'path/to/component_name'\nvar ctrl = zuix.controller(function(cp) {\n    // `cp` is the {ContextController}\n    cp.create = function() { ... };\n    cp.destroy = function() { ... }\n}).for('path/to/component_name');\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{ContextControllerHandler} handler The controller handler\nfunction ```function(cp){ ... } ```,\nwhere `cp` is the [`{ContextController}`](#ZUIX_API--ContextController)\nobject that is passed to the handler once the component\nis created.",
        "name": "handler",
        "description": "The controller handler function ```function(cp){ ... } ```,\nwhere `cp` is the [`{ContextController}`](#ZUIX_API--ContextController)\nobject that is passed to the handler once the component\nis created.",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ContextControllerHandler} The initialized controller handler.",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The initialized controller handler."
      }
    ],
    "description": {
      "full": "Initializes a controller ```handler```.",
      "summary": "Initializes a controller ```handler```.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 620,
    "codeStart": 642,
    "code": "Zuix.prototype.controller = controller;",
    "ctx": {
      "type": "property",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "controller",
      "value": "controller",
      "string": "Zuix.prototype.controller"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - HTML**</small>\n```html\n<div data-ui-field=\"container-div\">\n   <!-- container HTML -->\n</div>\n```\n\n<small>**Example - JavaScript**</small>\n```js\nvar containerDiv = zuix.field('container-div');\ncontainerDiv.html('Hello World!');\n```"
      },
      {
        "type": "param",
        "string": "{!string} fieldName The class to check for.",
        "name": "fieldName",
        "description": "The class to check for.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{!Element} [container] Starting DOM element for this search (**default:** *document*)",
        "name": "[container]",
        "description": "Starting DOM element for this search (**default:** *document*)",
        "types": [
          "Element"
        ],
        "typesDescription": "!<code>Element</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The `{ZxQuery}`-wrapped elements with matching ```data-ui-field``` attribute.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The `{ZxQuery}`-wrapped elements with matching ```data-ui-field``` attribute."
      }
    ],
    "description": {
      "full": "Searches and returns elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "summary": "Searches and returns elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 643,
    "codeStart": 666,
    "code": "Zuix.prototype.field = field;",
    "ctx": {
      "type": "property",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "field",
      "value": "field",
      "string": "Zuix.prototype.field"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n```js\nzuix.componentize(document);\n```"
      },
      {
        "type": "param",
        "string": "{Element} [element] Container to use as starting node for the search (**default:** *document*).",
        "name": "[element]",
        "description": "Container to use as starting node for the search (**default:** *document*).",
        "types": [
          "Element"
        ],
        "typesDescription": "<code>Element</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Searches inside the given element ```element```\nfor all ```data-ui-include``` and ```data-ui-load```\ndirectives and process them.\nThis is to be called if adding dynamically content\nwith elements that declare the above attributes.",
      "summary": "Searches inside the given element ```element```\nfor all ```data-ui-include``` and ```data-ui-load```\ndirectives and process them.\nThis is to be called if adding dynamically content\nwith elements that declare the above attributes.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 667,
    "codeStart": 684,
    "code": "Zuix.prototype.componentize = function (element) {\n    componentize(element);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "componentize",
      "string": "Zuix.prototype.componentize()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n```js\nvar exampleController = zuix.controller(function(cp){\n    cp.create = function() {\n        cp.expose('test', testMethod);\n        cp.view().html('Helllo World!');\n    }\n    function testMethod() {\n        console.log('Test method exposing');\n        cp.view().html('A simple test.');\n    }\n});\nvar componentOptions = {\n    container: zuix.field('container-div');\n    controller: exampleController,\n    ready: function () {\n        console.log('Loading complete.');\n        console.log('Component context instance', this);\n    },\n    error: function(error) {\n        console.log('Loading error!', error);\n    }\n};\nvar ctx = zuix.load('path/to/component_name', componentOptions);\nctx.test();\n```"
      },
      {
        "type": "param",
        "string": "{!string} componentId The identifier name of the component to be loaded.",
        "name": "componentId",
        "description": "The identifier name of the component to be loaded.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ContextOptions} [options] Options used to initialize the loaded component.",
        "name": "[options]",
        "description": "Options used to initialize the loaded component.",
        "types": [
          "ContextOptions"
        ],
        "typesDescription": "<a href=\"ContextOptions.html\">ContextOptions</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext} The component instance context.",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The component instance context."
      }
    ],
    "description": {
      "full": "Loads a component with the given options.\nThis is the programmatic equivalent of\n`data-ui-include` or `data-ui-load`.\nAll available options are described in the\n`ContextOptions` object documentation.",
      "summary": "Loads a component with the given options.\nThis is the programmatic equivalent of\n`data-ui-include` or `data-ui-load`.\nAll available options are described in the\n`ContextOptions` object documentation.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 688,
    "codeStart": 728,
    "code": "Zuix.prototype.load = load;",
    "ctx": {
      "type": "property",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "load",
      "value": "load",
      "string": "Zuix.prototype.load"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n```js\nzuix.unload(ctx);\n```"
      },
      {
        "type": "param",
        "string": "{ComponentContext} context The `ComponentContext` instance of the component to be unloaded.",
        "name": "context",
        "description": "The `ComponentContext` instance of the component to be unloaded.",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Unload and dispose the component.",
      "summary": "Unload and dispose the component.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 729,
    "codeStart": 742,
    "code": "Zuix.prototype.unload = function (context) {\n    unload(context);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "unload",
      "string": "Zuix.prototype.unload()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "<small>**Example - HTML**</small>\n```html\n<div data-ui-load=\"site/components/slideshow\"\n     data-ui-context=\"my-slide-show\">...</div>\n```\n<small>**Example - JavaScript**</small>\n```js\nvar slideShowDiv = zuix.$.find('[data-ui-context=\"my-slide-show\"]');\nvar ctx = zuix.context(slideShowDiv);\n// or\nvar ctx = zuix.context('my-slide-show');\n// call component's exposed methods\nctx.setSlide(1);\n```"
      },
      {
        "type": "param",
        "string": "{Element|ZxQuery|object} contextId The `contextId` object\n(usually a string) or the component's container/view element.",
        "name": "contextId",
        "description": "The `contextId` object (usually a string) or the component's container/view element.",
        "types": [
          "Element",
          "ZxQuery",
          "object"
        ],
        "typesDescription": "<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext} The matching component context.",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The matching component context."
      }
    ],
    "description": {
      "full": "Get the `ComponentContext`, given its `contextId`\nor component's container/view element.\nHTML attribute equivalent: `data-ui-context`.",
      "summary": "Get the `ComponentContext`, given its `contextId`\nor component's container/view element.\nHTML attribute equivalent: `data-ui-context`.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 746,
    "codeStart": 771,
    "code": "Zuix.prototype.context = context;",
    "ctx": {
      "type": "property",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "context",
      "value": "context",
      "string": "Zuix.prototype.context"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} context Context (`this`) for the event handler",
        "name": "context",
        "description": "Context (`this`) for the event handler",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} eventPath The path of the event to fire.",
        "name": "eventPath",
        "description": "The path of the event to fire.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} [eventData] The data object of the event.",
        "name": "[eventData]",
        "description": "The data object of the event.",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Triggers the event specified by `eventPath`.",
      "summary": "Triggers the event specified by `eventPath`.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 772,
    "codeStart": 780,
    "code": "Zuix.prototype.trigger = function (context, eventPath, eventData) {\n    trigger(context, eventPath, eventData);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "trigger",
      "string": "Zuix.prototype.trigger()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} eventPath The event path.",
        "name": "eventPath",
        "description": "The event path.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} eventHandler The handler function.",
        "name": "eventHandler",
        "description": "The handler function.",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Set handlers for global events hooks.\n\n<small>**Example - JavaScript**</small>\n```js\n// The context `this` in the event handlers will be\n// the {ComponentContext} object that sourced the event.\n// The `data` parameter passed to the handlers, is of\n// variant type, depending on the type of the occurring event.\nzuix\n  .hook('load:begin', function(data){\n    loaderMessage.html('Loading \"'+data.task+'\" ...');\n    loaderMessage.show();\n\n}).hook('load:next', function(data){\n    loaderMessage.html('\"'+data.task+'\" done, loading next..');\n\n}).hook('load:end', function(){\n    loaderMessage.hide();\n\n}).hook('html:parse', function (data) {\n    // ShowDown - MarkDown syntax compiler\n    if (this.options().markdown === true && typeof showdown !== 'undefined')\n        data.content = new showdown.Converter()\n            .makeHtml(data.content);\n\n}).hook('css:parse', function (data) {\n    // process css, eg. run a CSS pre-processor\n    // eg. Sass, Less, ...\n\n}).hook('view:process', function (view) {\n    // The view DOM is now fully loaded and ready\n\n    // Prism code syntax highlighter\n    view.find('code').each(function (i, block) {\n        this.addClass('language-javascript');\n        Prism.highlightElement(block);\n    });\n\n    // Force opening of all non-local links in a new window\n    zuix.$('a[href*=\"://\"]').attr('target','_blank');\n\n    // Material Design Light auto-detection\n    // Call DOM upgrade on newly added view elements\n    if (componentHandler)\n        componentHandler.upgradeElements(view.get());\n\n});\n```",
      "summary": "Set handlers for global events hooks.",
      "body": "<small>**Example - JavaScript**</small>\n```js\n// The context `this` in the event handlers will be\n// the {ComponentContext} object that sourced the event.\n// The `data` parameter passed to the handlers, is of\n// variant type, depending on the type of the occurring event.\nzuix\n  .hook('load:begin', function(data){\n    loaderMessage.html('Loading \"'+data.task+'\" ...');\n    loaderMessage.show();\n\n}).hook('load:next', function(data){\n    loaderMessage.html('\"'+data.task+'\" done, loading next..');\n\n}).hook('load:end', function(){\n    loaderMessage.hide();\n\n}).hook('html:parse', function (data) {\n    // ShowDown - MarkDown syntax compiler\n    if (this.options().markdown === true && typeof showdown !== 'undefined')\n        data.content = new showdown.Converter()\n            .makeHtml(data.content);\n\n}).hook('css:parse', function (data) {\n    // process css, eg. run a CSS pre-processor\n    // eg. Sass, Less, ...\n\n}).hook('view:process', function (view) {\n    // The view DOM is now fully loaded and ready\n\n    // Prism code syntax highlighter\n    view.find('code').each(function (i, block) {\n        this.addClass('language-javascript');\n        Prism.highlightElement(block);\n    });\n\n    // Force opening of all non-local links in a new window\n    zuix.$('a[href*=\"://\"]').attr('target','_blank');\n\n    // Material Design Light auto-detection\n    // Call DOM upgrade on newly added view elements\n    if (componentHandler)\n        componentHandler.upgradeElements(view.get());\n\n});\n```"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 784,
    "codeStart": 838,
    "code": "Zuix.prototype.hook = function (eventPath, eventHandler) {\n    hook(eventPath, eventHandler);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "hook",
      "string": "Zuix.prototype.hook()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [enable] Set lazy-load option.",
        "name": "[enable]",
        "description": "Set lazy-load option.",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} *true* if lazy-loading is enabled, *false* otherwise.",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if lazy-loading is enabled, *false* otherwise."
      }
    ],
    "description": {
      "full": "Enable/Disable lazy-loading, or get current setting.",
      "summary": "Enable/Disable lazy-loading, or get current setting.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 842,
    "codeStart": 848,
    "code": "Zuix.prototype.lazyLoad = lazyLoad;\n\nZuix.prototype.$ = z$;\nZuix.prototype.TaskQueue = TaskQueue;\nZuix.prototype.ZxQuery = z$.ZxQuery;\n\nZuix.prototype.dumpCache = function () {\n    console.log(\"ZUIX\", \"Component Cache\", _componentCache);\n};\nZuix.prototype.dumpContexts = function () {\n    console.log(\"ZUIX\", \"Loaded Component Instances\", _contextRoot);\n};\n\n// TODO: add zuix.options to configure stuff like\n// TODO: the css/html/js lookup base path (each individually own prop)",
    "ctx": {
      "type": "property",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "lazyLoad",
      "value": "lazyLoad",
      "string": "Zuix.prototype.lazyLoad"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "root",
        "name": "root",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "return",
        "string": "{Zuix}",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 864,
    "codeStart": 868,
    "code": "module.exports = function (root) {\n    var zuix = new Zuix();\n    document.addEventListener(\"DOMContentLoaded\", function(event) {\n        zuix.componentize();\n    });\n    return zuix;\n};",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  }
]